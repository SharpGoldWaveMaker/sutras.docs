import{useData as e}from"./chunks/data.aEhyoOZ4.js";import{provide as r,openBlock as t,createElementBlock as a,createStaticVNode as s}from"./chunks/sutras-console.ChiQzqOZ.js";const o=s('<h1 id="what-is-sutras" tabindex="-1">Sutras 是什么？ <a class="header-anchor" href="#what-is-sutras" aria-label="Permalink to &quot;Sutras 是什么？ {#what-is-sutras}&quot;">​</a></h1><p>Sutras专为<strong>快速构建以demo为中心的技术文档</strong>而设计。 简而言之，Sutras通过简单的配置，自动扫描Demo，将运行结果和源代码<strong>一致地</strong>集成到由 <a href="https://vitepress.dev/" target="_blank" rel="noreferrer">Vitepress</a> 构建的技术文档中。</p><p><strong>更多地：</strong></p><ul><li><p><strong>实时源码编辑、编译、执行和反馈</strong>：Sutras 实现了REPL（<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" target="_blank" rel="noreferrer">实时交互式编程环境</a>），支持快速测试代码片段、深入了解特性或进行概念验证（<a href="https://en.wikipedia.org/wiki/Proof_of_concept#Software_development" target="_blank" rel="noreferrer">PoC</a>）。</p></li><li><p><strong>沙箱环境</strong>：Sutras 支持你将demo运行在独立、隔离的 <a href="./preview/view#browser">沙箱环境</a> 中。</p></li><li><p><strong>灵活的展示模式</strong>：Sutras 支持 <a href="./preview/terminal">终端</a> 和 <a href="./preview/view">界面</a> 两种模式，适用于演示前端库或JavaScript工具库。</p></li><li><p><strong>支持自定义 <a href="./preview/device">设备尺寸</a> 和 <a href="./preview/style">展示样式</a></strong>：确保你的库在预期的设备尺寸上能够良好展示。</p></li><li><p><strong>服务端渲染（SSR）</strong>：Sutras 支持使用 <a href="./preview/ssr">SSR模式</a> 来渲染Demo。</p></li><li><p><strong>SingleRepo &amp; Monorepo</strong>：支持单项目及基于 <a href="https://yarnpkg.com/" target="_blank" rel="noreferrer">Yarn</a>、<a href="https://github.com/boltdb/bolt" target="_blank" rel="noreferrer">Bolt</a>、<a href="https://lerna.js.org/" target="_blank" rel="noreferrer">Lerna</a>、<a href="https://pnpm.io/" target="_blank" rel="noreferrer">pnpm</a>、<a href="https://rushjs.io/" target="_blank" rel="noreferrer">Rush</a> 等技术的多项目仓库架构。</p></li><li><p><strong>Demo模块化</strong>：Sutras 支持你将复杂的Demo拆分为多个文件实现<a href="./writing/include">模块化</a>，或多个Demo之间共享模块文件，并将这些文件作为Demo的一部分展示给库学习者。在REPL模式下，任一文件内容发生变化时，Sutras将只对变化的文件进行独立编译及<a href="./writing/include#hot-replacement">热替换</a></p></li></ul><div class="tip custom-block" style="padding-top:8px;"><p>只是想尝试一下？跳到<a href="./getting-started">快速开始</a>。</p><p>想快速了解Sutras是否适合你？跳到<a href="./examples">常见场景案例</a>。</p></div><h2 id="sutras的努力方向" tabindex="-1">Sutras的努力方向 <a class="header-anchor" href="#sutras的努力方向" aria-label="Permalink to &quot;Sutras的努力方向&quot;">​</a></h2><h3 id="面向库开发者的文档驱动开发模式" tabindex="-1">面向库开发者的文档驱动开发模式 <a class="header-anchor" href="#面向库开发者的文档驱动开发模式" aria-label="Permalink to &quot;面向库开发者的文档驱动开发模式&quot;">​</a></h3><p>Sutras 提倡在编码前，通过撰写文档的方式来明确库的目标、解决的问题、需求、特性及其预期的使用方式。 进而为每个特性设计Demo，并从Demo开始研发和测试你的库。 依托于<code>Vite</code>和<code>VitePress</code>，Sutras 能够让你在研发过程中<strong>实时便捷地预览Demo的运行结果</strong>。</p><h3 id="面向库学习者的高效学习体验" tabindex="-1">面向库学习者的高效学习体验 <a class="header-anchor" href="#面向库学习者的高效学习体验" aria-label="Permalink to &quot;面向库学习者的高效学习体验&quot;">​</a></h3><p>Sutras 从库学习者的角度出发，将对Demo的展示和交互进行持续的优化和改进。此外，Sutras 也在逐步借鉴<a href="https://storybook.js.org/" target="_blank" rel="noreferrer">Storybook</a>等优秀框架的功能，旨在为学习者提供更高效的学习体验。</p><h2 id="use-cases" tabindex="-1">使用场景 <a class="header-anchor" href="#use-cases" aria-label="Permalink to &quot;使用场景 {#use-cases}&quot;">​</a></h2><ul><li><p><strong>构建组件库文档</strong></p><p>如，<a href="https://element-plus.org/en-US/" target="_blank" rel="noreferrer">ElementPlus</a>、<a href="https://ant.design/docs/react/introduce" target="_blank" rel="noreferrer">Ant Design</a></p></li><li><p><strong>VueCompositionApi文档</strong></p><p>如，<a href="https://vueuse.org/" target="_blank" rel="noreferrer">Vueuse</a></p></li><li><p><strong>JavaScript工具库文档</strong></p><p>如，<a href="https://lodash.com/" target="_blank" rel="noreferrer">Lodash</a></p></li></ul><p>Sutras根据了常见场景总结了<a href="./examples">使用案例</a>，你也通过案例更直观地了解Sutras能为你做什么。</p><h2 id="developer-experience" tabindex="-1">书写体验 <a class="header-anchor" href="#developer-experience" aria-label="Permalink to &quot;书写体验 {#developer-experience}&quot;">​</a></h2><p>Saturas 致力于提供良好的库研发体验。</p><ul><li><p><strong>测试驱动</strong>：Sutras基于<a href="https://cn.vitejs.dev/" target="_blank" rel="noreferrer">Vite</a> &amp; <a href="https://vitepress.dev/" target="_blank" rel="noreferrer">Vitepress</a>，实现即时的服务器启动，始终立即反映 (&lt;100ms) 的编辑变化，无需重新加载页面，提供良好的测试驱动的研发体验。</p></li><li><p><strong>灵活排版</strong>：Sutras对文档排版无强制约束，你可以在Vitepress文档中的任何位置<strong>渐进式地插入</strong>你的Demo。后续Sutras也将开放<code>@sutras/hooks</code>，以支持库开发者自定义Demo展示、编辑样式。</p></li><li><p><strong>一致性维护</strong>：技术文档编撰者在维护过程中，无需关心：<strong>文档中展示的Demo的代码块</strong> 与 <strong>Demo源码</strong> 的一致性问题。</p></li><li><p><strong>简单配置</strong>：Sutras的配置很简单，详见 <a href="./writing/docs">Demo配置</a> 与 <a href="./config/index">插件配置</a>。</p></li></ul><h2 id="performance" tabindex="-1">性能 <a class="header-anchor" href="#performance" aria-label="Permalink to &quot;性能 {#performance}&quot;">​</a></h2><p>得益于现代浏览器的ESM及ImportMap，Sutras在<strong>沙箱模式下</strong>只需要消耗很少的浏览器资源：</p><ul><li><p><strong>懒加载</strong></p><p>Sutra的沙箱是懒加载的，每个Demo的编译、执行仅在即将进入视口时开始。</p></li><li><p><strong>局部编译</strong></p><p>Sutras只会编译Demo源码部分，对于Demo所依赖文件的编译则是在构建时完成。</p></li><li><p><strong>模块热替换</strong></p><p>Sutra实现了<a href="./writing/include">Demo的模块化</a>，并在模块内容发生变化时，只对相应的模块进行重新编译。</p></li><li><p><strong>LRU缓存</strong></p><p>Sutras通过对demo源码进行解析，实现了分块式LRU缓存。这对demo源码中包含较多的template, script内容时，无论组件研发时，还是线上REPL运行时，都提供了一些的性能节省。</p></li></ul><p>Sutras也针对性能方面做了<a href="./examples">100个复杂demo的加载案例</a></p>',20),n=[o],d=JSON.parse('{"title":"Sutras 是什么？","description":"","frontmatter":{},"headers":[],"relativePath":"guide/what-is-sutras.md","filePath":"guide/what-is-sutras.md","lastUpdated":null}'),i={name:"guide/what-is-sutras.md"},c=Object.assign(i,{setup(p){return r("PageDataInjectKey",e()),(l,h)=>(t(),a("div",null,n))}});export{d as __pageData,c as default};
